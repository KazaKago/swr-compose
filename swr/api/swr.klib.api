// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.kazakago.swr.compose:swr>
abstract interface <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> com.kazakago.swr.compose.state/SWRMutationState { // com.kazakago.swr.compose.state/SWRMutationState|null[0]
    abstract val data // com.kazakago.swr.compose.state/SWRMutationState.data|{}data[0]
        abstract fun <get-data>(): #B? // com.kazakago.swr.compose.state/SWRMutationState.data.<get-data>|<get-data>(){}[0]
    abstract val error // com.kazakago.swr.compose.state/SWRMutationState.error|{}error[0]
        abstract fun <get-error>(): kotlin/Throwable? // com.kazakago.swr.compose.state/SWRMutationState.error.<get-error>|<get-error>(){}[0]
    abstract val isMutating // com.kazakago.swr.compose.state/SWRMutationState.isMutating|{}isMutating[0]
        abstract fun <get-isMutating>(): kotlin/Boolean // com.kazakago.swr.compose.state/SWRMutationState.isMutating.<get-isMutating>|<get-isMutating>(){}[0]
    abstract val reset // com.kazakago.swr.compose.state/SWRMutationState.reset|{}reset[0]
        abstract fun <get-reset>(): com.kazakago.swr.compose.trigger/SWRReset<#A, #B> // com.kazakago.swr.compose.state/SWRMutationState.reset.<get-reset>|<get-reset>(){}[0]
    abstract val trigger // com.kazakago.swr.compose.state/SWRMutationState.trigger|{}trigger[0]
        abstract fun <get-trigger>(): com.kazakago.swr.compose.trigger/SWRTrigger<#A, #B, #C> // com.kazakago.swr.compose.state/SWRMutationState.trigger.<get-trigger>|<get-trigger>(){}[0]
    final object Companion { // com.kazakago.swr.compose.state/SWRMutationState.Companion|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?> empty(#B2? = ..., kotlin/Throwable? = ..., com.kazakago.swr.compose.trigger/SWRTrigger<#A2, #B2, #C2> = ..., com.kazakago.swr.compose.trigger/SWRReset<#A2, #B2> = ..., kotlin/Boolean = ...): com.kazakago.swr.compose.state/SWRMutationState<#A2, #B2, #C2> // com.kazakago.swr.compose.state/SWRMutationState.Companion.empty|empty(0:1?;kotlin.Throwable?;com.kazakago.swr.compose.trigger.SWRTrigger<0:0,0:1,0:2>;com.kazakago.swr.compose.trigger.SWRReset<0:0,0:1>;kotlin.Boolean){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
    }
    open fun component1(): #B? // com.kazakago.swr.compose.state/SWRMutationState.component1|component1(){}[0]
    open fun component2(): kotlin/Throwable? // com.kazakago.swr.compose.state/SWRMutationState.component2|component2(){}[0]
    open fun component3(): com.kazakago.swr.compose.trigger/SWRTrigger<#A, #B, #C> // com.kazakago.swr.compose.state/SWRMutationState.component3|component3(){}[0]
    open fun component4(): com.kazakago.swr.compose.trigger/SWRReset<#A, #B> // com.kazakago.swr.compose.state/SWRMutationState.component4|component4(){}[0]
    open fun component5(): kotlin/Boolean // com.kazakago.swr.compose.state/SWRMutationState.component5|component5(){}[0]
}
abstract interface <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> com.kazakago.swr.compose.trigger/SWRTrigger { // com.kazakago.swr.compose.trigger/SWRTrigger|null[0]
    abstract suspend fun invoke(#C, kotlin/Function1<com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit> = ...): #B? // com.kazakago.swr.compose.trigger/SWRTrigger.invoke|invoke(1:2;kotlin.Function1<com.kazakago.swr.compose.config.SWRTriggerConfig<1:0,1:1>,kotlin.Unit>){}[0]
    final object Companion { // com.kazakago.swr.compose.trigger/SWRTrigger.Companion|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?> empty(): com.kazakago.swr.compose.trigger/SWRTrigger<#A2, #B2, #C2> // com.kazakago.swr.compose.trigger/SWRTrigger.Companion.empty|empty(){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
    }
}
abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose.config/SWRConfig { // com.kazakago.swr.compose.config/SWRConfig|null[0]
    abstract var dedupingInterval // com.kazakago.swr.compose.config/SWRConfig.dedupingInterval|{}dedupingInterval[0]
        abstract fun <get-dedupingInterval>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRConfig.dedupingInterval.<get-dedupingInterval>|<get-dedupingInterval>(){}[0]
        abstract fun <set-dedupingInterval>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRConfig.dedupingInterval.<set-dedupingInterval>|<set-dedupingInterval>(kotlin.time.Duration){}[0]
    abstract var errorRetryCount // com.kazakago.swr.compose.config/SWRConfig.errorRetryCount|{}errorRetryCount[0]
        abstract fun <get-errorRetryCount>(): kotlin/Int? // com.kazakago.swr.compose.config/SWRConfig.errorRetryCount.<get-errorRetryCount>|<get-errorRetryCount>(){}[0]
        abstract fun <set-errorRetryCount>(kotlin/Int?) // com.kazakago.swr.compose.config/SWRConfig.errorRetryCount.<set-errorRetryCount>|<set-errorRetryCount>(kotlin.Int?){}[0]
    abstract var errorRetryInterval // com.kazakago.swr.compose.config/SWRConfig.errorRetryInterval|{}errorRetryInterval[0]
        abstract fun <get-errorRetryInterval>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRConfig.errorRetryInterval.<get-errorRetryInterval>|<get-errorRetryInterval>(){}[0]
        abstract fun <set-errorRetryInterval>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRConfig.errorRetryInterval.<set-errorRetryInterval>|<set-errorRetryInterval>(kotlin.time.Duration){}[0]
    abstract var fallback // com.kazakago.swr.compose.config/SWRConfig.fallback|{}fallback[0]
        abstract fun <get-fallback>(): kotlin.collections/Map<#A, #B> // com.kazakago.swr.compose.config/SWRConfig.fallback.<get-fallback>|<get-fallback>(){}[0]
        abstract fun <set-fallback>(kotlin.collections/Map<#A, #B>) // com.kazakago.swr.compose.config/SWRConfig.fallback.<set-fallback>|<set-fallback>(kotlin.collections.Map<1:0,1:1>){}[0]
    abstract var fallbackData // com.kazakago.swr.compose.config/SWRConfig.fallbackData|{}fallbackData[0]
        abstract fun <get-fallbackData>(): #B? // com.kazakago.swr.compose.config/SWRConfig.fallbackData.<get-fallbackData>|<get-fallbackData>(){}[0]
        abstract fun <set-fallbackData>(#B?) // com.kazakago.swr.compose.config/SWRConfig.fallbackData.<set-fallbackData>|<set-fallbackData>(1:1?){}[0]
    abstract var fetcher // com.kazakago.swr.compose.config/SWRConfig.fetcher|{}fetcher[0]
        abstract fun <get-fetcher>(): kotlin.coroutines/SuspendFunction1<#A, #B>? // com.kazakago.swr.compose.config/SWRConfig.fetcher.<get-fetcher>|<get-fetcher>(){}[0]
        abstract fun <set-fetcher>(kotlin.coroutines/SuspendFunction1<#A, #B>?) // com.kazakago.swr.compose.config/SWRConfig.fetcher.<set-fetcher>|<set-fetcher>(kotlin.coroutines.SuspendFunction1<1:0,1:1>?){}[0]
    abstract var focusThrottleInterval // com.kazakago.swr.compose.config/SWRConfig.focusThrottleInterval|{}focusThrottleInterval[0]
        abstract fun <get-focusThrottleInterval>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRConfig.focusThrottleInterval.<get-focusThrottleInterval>|<get-focusThrottleInterval>(){}[0]
        abstract fun <set-focusThrottleInterval>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRConfig.focusThrottleInterval.<set-focusThrottleInterval>|<set-focusThrottleInterval>(kotlin.time.Duration){}[0]
    abstract var isPaused // com.kazakago.swr.compose.config/SWRConfig.isPaused|{}isPaused[0]
        abstract fun <get-isPaused>(): kotlin/Function0<kotlin/Boolean> // com.kazakago.swr.compose.config/SWRConfig.isPaused.<get-isPaused>|<get-isPaused>(){}[0]
        abstract fun <set-isPaused>(kotlin/Function0<kotlin/Boolean>) // com.kazakago.swr.compose.config/SWRConfig.isPaused.<set-isPaused>|<set-isPaused>(kotlin.Function0<kotlin.Boolean>){}[0]
    abstract var keepPreviousData // com.kazakago.swr.compose.config/SWRConfig.keepPreviousData|{}keepPreviousData[0]
        abstract fun <get-keepPreviousData>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRConfig.keepPreviousData.<get-keepPreviousData>|<get-keepPreviousData>(){}[0]
        abstract fun <set-keepPreviousData>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRConfig.keepPreviousData.<set-keepPreviousData>|<set-keepPreviousData>(kotlin.Boolean){}[0]
    abstract var loadingTimeout // com.kazakago.swr.compose.config/SWRConfig.loadingTimeout|{}loadingTimeout[0]
        abstract fun <get-loadingTimeout>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRConfig.loadingTimeout.<get-loadingTimeout>|<get-loadingTimeout>(){}[0]
        abstract fun <set-loadingTimeout>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRConfig.loadingTimeout.<set-loadingTimeout>|<set-loadingTimeout>(kotlin.time.Duration){}[0]
    abstract var onError // com.kazakago.swr.compose.config/SWRConfig.onError|{}onError[0]
        abstract fun <get-onError>(): kotlin/Function3<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRConfig.onError.<get-onError>|<get-onError>(){}[0]
        abstract fun <set-onError>(kotlin/Function3<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?) // com.kazakago.swr.compose.config/SWRConfig.onError.<set-onError>|<set-onError>(kotlin.Function3<kotlin.Throwable,1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,kotlin.Unit>?){}[0]
    abstract var onErrorRetry // com.kazakago.swr.compose.config/SWRConfig.onErrorRetry|{}onErrorRetry[0]
        abstract fun <get-onErrorRetry>(): kotlin.coroutines/SuspendFunction5<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, com.kazakago.swr.compose.validate/SWRValidate<#A>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit> // com.kazakago.swr.compose.config/SWRConfig.onErrorRetry.<get-onErrorRetry>|<get-onErrorRetry>(){}[0]
        abstract fun <set-onErrorRetry>(kotlin.coroutines/SuspendFunction5<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, com.kazakago.swr.compose.validate/SWRValidate<#A>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit>) // com.kazakago.swr.compose.config/SWRConfig.onErrorRetry.<set-onErrorRetry>|<set-onErrorRetry>(kotlin.coroutines.SuspendFunction5<kotlin.Throwable,1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,com.kazakago.swr.compose.validate.SWRValidate<1:0>,com.kazakago.swr.compose.validate.SWRValidateOptions,kotlin.Unit>){}[0]
    abstract var onLoadingSlow // com.kazakago.swr.compose.config/SWRConfig.onLoadingSlow|{}onLoadingSlow[0]
        abstract fun <get-onLoadingSlow>(): kotlin/Function2<#A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRConfig.onLoadingSlow.<get-onLoadingSlow>|<get-onLoadingSlow>(){}[0]
        abstract fun <set-onLoadingSlow>(kotlin/Function2<#A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?) // com.kazakago.swr.compose.config/SWRConfig.onLoadingSlow.<set-onLoadingSlow>|<set-onLoadingSlow>(kotlin.Function2<1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,kotlin.Unit>?){}[0]
    abstract var onSuccess // com.kazakago.swr.compose.config/SWRConfig.onSuccess|{}onSuccess[0]
        abstract fun <get-onSuccess>(): kotlin/Function3<#B, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRConfig.onSuccess.<get-onSuccess>|<get-onSuccess>(){}[0]
        abstract fun <set-onSuccess>(kotlin/Function3<#B, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?) // com.kazakago.swr.compose.config/SWRConfig.onSuccess.<set-onSuccess>|<set-onSuccess>(kotlin.Function3<1:1,1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,kotlin.Unit>?){}[0]
    abstract var refreshInterval // com.kazakago.swr.compose.config/SWRConfig.refreshInterval|{}refreshInterval[0]
        abstract fun <get-refreshInterval>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRConfig.refreshInterval.<get-refreshInterval>|<get-refreshInterval>(){}[0]
        abstract fun <set-refreshInterval>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRConfig.refreshInterval.<set-refreshInterval>|<set-refreshInterval>(kotlin.time.Duration){}[0]
    abstract var refreshWhenHidden // com.kazakago.swr.compose.config/SWRConfig.refreshWhenHidden|{}refreshWhenHidden[0]
        abstract fun <get-refreshWhenHidden>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRConfig.refreshWhenHidden.<get-refreshWhenHidden>|<get-refreshWhenHidden>(){}[0]
        abstract fun <set-refreshWhenHidden>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRConfig.refreshWhenHidden.<set-refreshWhenHidden>|<set-refreshWhenHidden>(kotlin.Boolean){}[0]
    abstract var refreshWhenOffline // com.kazakago.swr.compose.config/SWRConfig.refreshWhenOffline|{}refreshWhenOffline[0]
        abstract fun <get-refreshWhenOffline>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRConfig.refreshWhenOffline.<get-refreshWhenOffline>|<get-refreshWhenOffline>(){}[0]
        abstract fun <set-refreshWhenOffline>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRConfig.refreshWhenOffline.<set-refreshWhenOffline>|<set-refreshWhenOffline>(kotlin.Boolean){}[0]
    abstract var revalidateIfStale // com.kazakago.swr.compose.config/SWRConfig.revalidateIfStale|{}revalidateIfStale[0]
        abstract fun <get-revalidateIfStale>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRConfig.revalidateIfStale.<get-revalidateIfStale>|<get-revalidateIfStale>(){}[0]
        abstract fun <set-revalidateIfStale>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRConfig.revalidateIfStale.<set-revalidateIfStale>|<set-revalidateIfStale>(kotlin.Boolean){}[0]
    abstract var revalidateOnFocus // com.kazakago.swr.compose.config/SWRConfig.revalidateOnFocus|{}revalidateOnFocus[0]
        abstract fun <get-revalidateOnFocus>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRConfig.revalidateOnFocus.<get-revalidateOnFocus>|<get-revalidateOnFocus>(){}[0]
        abstract fun <set-revalidateOnFocus>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRConfig.revalidateOnFocus.<set-revalidateOnFocus>|<set-revalidateOnFocus>(kotlin.Boolean){}[0]
    abstract var revalidateOnMount // com.kazakago.swr.compose.config/SWRConfig.revalidateOnMount|{}revalidateOnMount[0]
        abstract fun <get-revalidateOnMount>(): kotlin/Boolean? // com.kazakago.swr.compose.config/SWRConfig.revalidateOnMount.<get-revalidateOnMount>|<get-revalidateOnMount>(){}[0]
        abstract fun <set-revalidateOnMount>(kotlin/Boolean?) // com.kazakago.swr.compose.config/SWRConfig.revalidateOnMount.<set-revalidateOnMount>|<set-revalidateOnMount>(kotlin.Boolean?){}[0]
    abstract var revalidateOnReconnect // com.kazakago.swr.compose.config/SWRConfig.revalidateOnReconnect|{}revalidateOnReconnect[0]
        abstract fun <get-revalidateOnReconnect>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRConfig.revalidateOnReconnect.<get-revalidateOnReconnect>|<get-revalidateOnReconnect>(){}[0]
        abstract fun <set-revalidateOnReconnect>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRConfig.revalidateOnReconnect.<set-revalidateOnReconnect>|<set-revalidateOnReconnect>(kotlin.Boolean){}[0]
    abstract var scope // com.kazakago.swr.compose.config/SWRConfig.scope|{}scope[0]
        abstract fun <get-scope>(): kotlinx.coroutines/CoroutineScope? // com.kazakago.swr.compose.config/SWRConfig.scope.<get-scope>|<get-scope>(){}[0]
        abstract fun <set-scope>(kotlinx.coroutines/CoroutineScope?) // com.kazakago.swr.compose.config/SWRConfig.scope.<set-scope>|<set-scope>(kotlinx.coroutines.CoroutineScope?){}[0]
    abstract var shouldRetryOnError // com.kazakago.swr.compose.config/SWRConfig.shouldRetryOnError|{}shouldRetryOnError[0]
        abstract fun <get-shouldRetryOnError>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRConfig.shouldRetryOnError.<get-shouldRetryOnError>|<get-shouldRetryOnError>(){}[0]
        abstract fun <set-shouldRetryOnError>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRConfig.shouldRetryOnError.<set-shouldRetryOnError>|<set-shouldRetryOnError>(kotlin.Boolean){}[0]
}
abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose.mutate/SWRMutate { // com.kazakago.swr.compose.mutate/SWRMutate|null[0]
    abstract suspend fun invoke(#A? = ..., kotlin.coroutines/SuspendFunction0<#B>? = ..., kotlin/Function1<com.kazakago.swr.compose.config/SWRMutateConfig<#B>, kotlin/Unit> = ...) // com.kazakago.swr.compose.mutate/SWRMutate.invoke|invoke(1:0?;kotlin.coroutines.SuspendFunction0<1:1>?;kotlin.Function1<com.kazakago.swr.compose.config.SWRMutateConfig<1:1>,kotlin.Unit>){}[0]
    final object Companion { // com.kazakago.swr.compose.mutate/SWRMutate.Companion|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> empty(): com.kazakago.swr.compose.mutate/SWRMutate<#A2, #B2> // com.kazakago.swr.compose.mutate/SWRMutate.Companion.empty|empty(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    }
}
abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose.state/SWRConfigState { // com.kazakago.swr.compose.state/SWRConfigState|null[0]
    abstract val cache // com.kazakago.swr.compose.state/SWRConfigState.cache|{}cache[0]
        abstract fun <get-cache>(): com.kazakago.swr.compose.cache/SWRCache // com.kazakago.swr.compose.state/SWRConfigState.cache.<get-cache>|<get-cache>(){}[0]
    abstract val config // com.kazakago.swr.compose.state/SWRConfigState.config|{}config[0]
        abstract fun <get-config>(): com.kazakago.swr.compose.config/SWRConfig<#A, #B> // com.kazakago.swr.compose.state/SWRConfigState.config.<get-config>|<get-config>(){}[0]
    abstract val mutate // com.kazakago.swr.compose.state/SWRConfigState.mutate|{}mutate[0]
        abstract fun <get-mutate>(): com.kazakago.swr.compose.mutate/SWRMutate<#A, #B> // com.kazakago.swr.compose.state/SWRConfigState.mutate.<get-mutate>|<get-mutate>(){}[0]
    final object Companion { // com.kazakago.swr.compose.state/SWRConfigState.Companion|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> empty(com.kazakago.swr.compose.mutate/SWRMutate<#A2, #B2> = ..., com.kazakago.swr.compose.config/SWRConfig<#A2, #B2> = ..., com.kazakago.swr.compose.cache/SWRCache = ...): com.kazakago.swr.compose.state/SWRConfigState<#A2, #B2> // com.kazakago.swr.compose.state/SWRConfigState.Companion.empty|empty(com.kazakago.swr.compose.mutate.SWRMutate<0:0,0:1>;com.kazakago.swr.compose.config.SWRConfig<0:0,0:1>;com.kazakago.swr.compose.cache.SWRCache){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    }
    open fun component1(): com.kazakago.swr.compose.mutate/SWRMutate<#A, #B> // com.kazakago.swr.compose.state/SWRConfigState.component1|component1(){}[0]
    open fun component2(): com.kazakago.swr.compose.config/SWRConfig<#A, #B> // com.kazakago.swr.compose.state/SWRConfigState.component2|component2(){}[0]
    open fun component3(): com.kazakago.swr.compose.cache/SWRCache // com.kazakago.swr.compose.state/SWRConfigState.component3|component3(){}[0]
}
abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose.state/SWRInfiniteState { // com.kazakago.swr.compose.state/SWRInfiniteState|null[0]
    abstract val data // com.kazakago.swr.compose.state/SWRInfiniteState.data|{}data[0]
        abstract fun <get-data>(): kotlin.collections/List<#B?>? // com.kazakago.swr.compose.state/SWRInfiniteState.data.<get-data>|<get-data>(){}[0]
    abstract val error // com.kazakago.swr.compose.state/SWRInfiniteState.error|{}error[0]
        abstract fun <get-error>(): kotlin/Throwable? // com.kazakago.swr.compose.state/SWRInfiniteState.error.<get-error>|<get-error>(){}[0]
    abstract val isLoading // com.kazakago.swr.compose.state/SWRInfiniteState.isLoading|{}isLoading[0]
        abstract fun <get-isLoading>(): kotlin/Boolean // com.kazakago.swr.compose.state/SWRInfiniteState.isLoading.<get-isLoading>|<get-isLoading>(){}[0]
    abstract val isValidating // com.kazakago.swr.compose.state/SWRInfiniteState.isValidating|{}isValidating[0]
        abstract fun <get-isValidating>(): kotlin/Boolean // com.kazakago.swr.compose.state/SWRInfiniteState.isValidating.<get-isValidating>|<get-isValidating>(){}[0]
    abstract val mutate // com.kazakago.swr.compose.state/SWRInfiniteState.mutate|{}mutate[0]
        abstract fun <get-mutate>(): com.kazakago.swr.compose.mutate/SWRMutate<#A, kotlin.collections/List<#B>> // com.kazakago.swr.compose.state/SWRInfiniteState.mutate.<get-mutate>|<get-mutate>(){}[0]
    abstract val setSize // com.kazakago.swr.compose.state/SWRInfiniteState.setSize|{}setSize[0]
        abstract fun <get-setSize>(): kotlin/Function1<kotlin/Int, kotlin/Unit> // com.kazakago.swr.compose.state/SWRInfiniteState.setSize.<get-setSize>|<get-setSize>(){}[0]
    abstract val size // com.kazakago.swr.compose.state/SWRInfiniteState.size|{}size[0]
        abstract fun <get-size>(): kotlin/Int // com.kazakago.swr.compose.state/SWRInfiniteState.size.<get-size>|<get-size>(){}[0]
    final object Companion { // com.kazakago.swr.compose.state/SWRInfiniteState.Companion|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> empty(kotlin.collections/List<#B2?> = ..., kotlin/Throwable? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., com.kazakago.swr.compose.mutate/SWRMutate<#A2, kotlin.collections/List<#B2>> = ..., kotlin/Int = ..., kotlin/Function1<kotlin/Int, kotlin/Unit> = ...): com.kazakago.swr.compose.state/SWRInfiniteState<#A2, #B2> // com.kazakago.swr.compose.state/SWRInfiniteState.Companion.empty|empty(kotlin.collections.List<0:1?>;kotlin.Throwable?;kotlin.Boolean;kotlin.Boolean;com.kazakago.swr.compose.mutate.SWRMutate<0:0,kotlin.collections.List<0:1>>;kotlin.Int;kotlin.Function1<kotlin.Int,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    }
    open fun component1(): kotlin.collections/List<#B?>? // com.kazakago.swr.compose.state/SWRInfiniteState.component1|component1(){}[0]
    open fun component2(): kotlin/Throwable? // com.kazakago.swr.compose.state/SWRInfiniteState.component2|component2(){}[0]
    open fun component3(): kotlin/Boolean // com.kazakago.swr.compose.state/SWRInfiniteState.component3|component3(){}[0]
    open fun component4(): kotlin/Boolean // com.kazakago.swr.compose.state/SWRInfiniteState.component4|component4(){}[0]
    open fun component5(): com.kazakago.swr.compose.mutate/SWRMutate<#A, kotlin.collections/List<#B>> // com.kazakago.swr.compose.state/SWRInfiniteState.component5|component5(){}[0]
    open fun component6(): kotlin/Int // com.kazakago.swr.compose.state/SWRInfiniteState.component6|component6(){}[0]
    open fun component7(): kotlin/Function1<kotlin/Int, kotlin/Unit> // com.kazakago.swr.compose.state/SWRInfiniteState.component7|component7(){}[0]
}
abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose.state/SWRState { // com.kazakago.swr.compose.state/SWRState|null[0]
    abstract val data // com.kazakago.swr.compose.state/SWRState.data|{}data[0]
        abstract fun <get-data>(): #B? // com.kazakago.swr.compose.state/SWRState.data.<get-data>|<get-data>(){}[0]
    abstract val error // com.kazakago.swr.compose.state/SWRState.error|{}error[0]
        abstract fun <get-error>(): kotlin/Throwable? // com.kazakago.swr.compose.state/SWRState.error.<get-error>|<get-error>(){}[0]
    abstract val isLoading // com.kazakago.swr.compose.state/SWRState.isLoading|{}isLoading[0]
        abstract fun <get-isLoading>(): kotlin/Boolean // com.kazakago.swr.compose.state/SWRState.isLoading.<get-isLoading>|<get-isLoading>(){}[0]
    abstract val isValidating // com.kazakago.swr.compose.state/SWRState.isValidating|{}isValidating[0]
        abstract fun <get-isValidating>(): kotlin/Boolean // com.kazakago.swr.compose.state/SWRState.isValidating.<get-isValidating>|<get-isValidating>(){}[0]
    abstract val mutate // com.kazakago.swr.compose.state/SWRState.mutate|{}mutate[0]
        abstract fun <get-mutate>(): com.kazakago.swr.compose.mutate/SWRMutate<#A, #B> // com.kazakago.swr.compose.state/SWRState.mutate.<get-mutate>|<get-mutate>(){}[0]
    final object Companion { // com.kazakago.swr.compose.state/SWRState.Companion|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> empty(#B2? = ..., kotlin/Throwable? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., com.kazakago.swr.compose.mutate/SWRMutate<#A2, #B2> = ...): com.kazakago.swr.compose.state/SWRState<#A2, #B2> // com.kazakago.swr.compose.state/SWRState.Companion.empty|empty(0:1?;kotlin.Throwable?;kotlin.Boolean;kotlin.Boolean;com.kazakago.swr.compose.mutate.SWRMutate<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    }
    open fun component1(): #B? // com.kazakago.swr.compose.state/SWRState.component1|component1(){}[0]
    open fun component2(): kotlin/Throwable? // com.kazakago.swr.compose.state/SWRState.component2|component2(){}[0]
    open fun component3(): kotlin/Boolean // com.kazakago.swr.compose.state/SWRState.component3|component3(){}[0]
    open fun component4(): kotlin/Boolean // com.kazakago.swr.compose.state/SWRState.component4|component4(){}[0]
    open fun component5(): com.kazakago.swr.compose.mutate/SWRMutate<#A, #B> // com.kazakago.swr.compose.state/SWRState.component5|component5(){}[0]
}
abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose.trigger/SWRReset { // com.kazakago.swr.compose.trigger/SWRReset|null[0]
    abstract fun invoke() // com.kazakago.swr.compose.trigger/SWRReset.invoke|invoke(){}[0]
    final object Companion { // com.kazakago.swr.compose.trigger/SWRReset.Companion|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> empty(): com.kazakago.swr.compose.trigger/SWRReset<#A2, #B2> // com.kazakago.swr.compose.trigger/SWRReset.Companion.empty|empty(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    }
}
abstract interface <#A: kotlin/Any?> com.kazakago.swr.compose.validate/SWRValidate { // com.kazakago.swr.compose.validate/SWRValidate|null[0]
    abstract suspend fun invoke(#A?, com.kazakago.swr.compose.validate/SWRValidateOptions? = ...) // com.kazakago.swr.compose.validate/SWRValidate.invoke|invoke(1:0?;com.kazakago.swr.compose.validate.SWRValidateOptions?){}[0]
}
abstract interface com.kazakago.swr.compose.cache/SWRCache { // com.kazakago.swr.compose.cache/SWRCache|null[0]
    abstract fun <#A1: kotlin/Any?, #B1: kotlin/Any?> state(#A1): androidx.compose.runtime/MutableState<#B1?> // com.kazakago.swr.compose.cache/SWRCache.state|state(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    abstract fun clear() // com.kazakago.swr.compose.cache/SWRCache.clear|clear(){}[0]
}
abstract interface com.kazakago.swr.compose.cache/SWRSystemCache { // com.kazakago.swr.compose.cache/SWRSystemCache|null[0]
    abstract fun <#A1: kotlin/Any?, #B1: kotlin/Any?> getFetcher(#A1): kotlin.coroutines/SuspendFunction1<#A1, #B1>? // com.kazakago.swr.compose.cache/SWRSystemCache.getFetcher|getFetcher(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?, #B1: kotlin/Any?> setFetcher(#A1, kotlin.coroutines/SuspendFunction1<#A1, #B1>) // com.kazakago.swr.compose.cache/SWRSystemCache.setFetcher|setFetcher(0:0;kotlin.coroutines.SuspendFunction1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> errorState(#A1): androidx.compose.runtime/MutableState<kotlin/Throwable?> // com.kazakago.swr.compose.cache/SWRSystemCache.errorState|errorState(0:0){0§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> getFocusedTimerJob(#A1): kotlinx.coroutines/Job? // com.kazakago.swr.compose.cache/SWRSystemCache.getFocusedTimerJob|getFocusedTimerJob(0:0){0§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> getRetryingJobSet(#A1): kotlin.collections/Set<kotlinx.coroutines/Job> // com.kazakago.swr.compose.cache/SWRSystemCache.getRetryingJobSet|getRetryingJobSet(0:0){0§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> getValidatedTimerJob(#A1): kotlinx.coroutines/Job? // com.kazakago.swr.compose.cache/SWRSystemCache.getValidatedTimerJob|getValidatedTimerJob(0:0){0§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> isValidatingState(#A1): androidx.compose.runtime/MutableState<kotlin/Boolean> // com.kazakago.swr.compose.cache/SWRSystemCache.isValidatingState|isValidatingState(0:0){0§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> setFocusedTimerJob(#A1, kotlinx.coroutines/Job) // com.kazakago.swr.compose.cache/SWRSystemCache.setFocusedTimerJob|setFocusedTimerJob(0:0;kotlinx.coroutines.Job){0§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> setRetryingJobSet(#A1, kotlin.collections/Set<kotlinx.coroutines/Job>) // com.kazakago.swr.compose.cache/SWRSystemCache.setRetryingJobSet|setRetryingJobSet(0:0;kotlin.collections.Set<kotlinx.coroutines.Job>){0§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> setValidatedTimerJob(#A1, kotlinx.coroutines/Job) // com.kazakago.swr.compose.cache/SWRSystemCache.setValidatedTimerJob|setValidatedTimerJob(0:0;kotlinx.coroutines.Job){0§<kotlin.Any?>}[0]
    abstract fun clear() // com.kazakago.swr.compose.cache/SWRSystemCache.clear|clear(){}[0]
}
abstract interface com.kazakago.swr.compose.preload/SWRPreload { // com.kazakago.swr.compose.preload/SWRPreload|null[0]
    abstract suspend fun invoke() // com.kazakago.swr.compose.preload/SWRPreload.invoke|invoke(){}[0]
}
final class <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose.config/SWRInfiniteConfig : com.kazakago.swr.compose.config/SWRConfig<#A, #B> { // com.kazakago.swr.compose.config/SWRInfiniteConfig|null[0]
    constructor <init>(kotlin.coroutines/SuspendFunction1<#A, #B>?, kotlin/Boolean, kotlin/Boolean?, kotlin/Boolean, kotlin/Boolean, kotlin.time/Duration, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin.time/Duration, kotlin.time/Duration, kotlin.time/Duration, kotlin.time/Duration, kotlin/Int?, kotlin.collections/Map<#A, #B>, #B? = ..., kotlin/Boolean, kotlin/Function2<#A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?, kotlin/Function3<#B, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?, kotlin/Function3<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?, kotlin.coroutines/SuspendFunction5<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, com.kazakago.swr.compose.validate/SWRValidate<#A>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit>, kotlin/Function0<kotlin/Boolean>, kotlin/Int = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlinx.coroutines/CoroutineScope?) // com.kazakago.swr.compose.config/SWRInfiniteConfig.<init>|<init>(kotlin.coroutines.SuspendFunction1<1:0,1:1>?;kotlin.Boolean;kotlin.Boolean?;kotlin.Boolean;kotlin.Boolean;kotlin.time.Duration;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.time.Duration;kotlin.time.Duration;kotlin.time.Duration;kotlin.time.Duration;kotlin.Int?;kotlin.collections.Map<1:0,1:1>;1:1?;kotlin.Boolean;kotlin.Function2<1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,kotlin.Unit>?;kotlin.Function3<1:1,1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,kotlin.Unit>?;kotlin.Function3<kotlin.Throwable,1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,kotlin.Unit>?;kotlin.coroutines.SuspendFunction5<kotlin.Throwable,1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,com.kazakago.swr.compose.validate.SWRValidate<1:0>,com.kazakago.swr.compose.validate.SWRValidateOptions,kotlin.Unit>;kotlin.Function0<kotlin.Boolean>;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlinx.coroutines.CoroutineScope?){}[0]
    final fun component1(): kotlin.coroutines/SuspendFunction1<#A, #B>? // com.kazakago.swr.compose.config/SWRInfiniteConfig.component1|component1(){}[0]
    final fun component10(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRInfiniteConfig.component10|component10(){}[0]
    final fun component11(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRInfiniteConfig.component11|component11(){}[0]
    final fun component12(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRInfiniteConfig.component12|component12(){}[0]
    final fun component13(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRInfiniteConfig.component13|component13(){}[0]
    final fun component14(): kotlin/Int? // com.kazakago.swr.compose.config/SWRInfiniteConfig.component14|component14(){}[0]
    final fun component15(): kotlin.collections/Map<#A, #B> // com.kazakago.swr.compose.config/SWRInfiniteConfig.component15|component15(){}[0]
    final fun component16(): #B? // com.kazakago.swr.compose.config/SWRInfiniteConfig.component16|component16(){}[0]
    final fun component17(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.component17|component17(){}[0]
    final fun component18(): kotlin/Function2<#A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRInfiniteConfig.component18|component18(){}[0]
    final fun component19(): kotlin/Function3<#B, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRInfiniteConfig.component19|component19(){}[0]
    final fun component2(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.component2|component2(){}[0]
    final fun component20(): kotlin/Function3<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRInfiniteConfig.component20|component20(){}[0]
    final fun component21(): kotlin.coroutines/SuspendFunction5<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, com.kazakago.swr.compose.validate/SWRValidate<#A>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit> // com.kazakago.swr.compose.config/SWRInfiniteConfig.component21|component21(){}[0]
    final fun component22(): kotlin/Function0<kotlin/Boolean> // com.kazakago.swr.compose.config/SWRInfiniteConfig.component22|component22(){}[0]
    final fun component23(): kotlin/Int // com.kazakago.swr.compose.config/SWRInfiniteConfig.component23|component23(){}[0]
    final fun component24(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.component24|component24(){}[0]
    final fun component25(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.component25|component25(){}[0]
    final fun component26(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.component26|component26(){}[0]
    final fun component27(): kotlinx.coroutines/CoroutineScope? // com.kazakago.swr.compose.config/SWRInfiniteConfig.component27|component27(){}[0]
    final fun component3(): kotlin/Boolean? // com.kazakago.swr.compose.config/SWRInfiniteConfig.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.component5|component5(){}[0]
    final fun component6(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRInfiniteConfig.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.component9|component9(){}[0]
    final fun copy(kotlin.coroutines/SuspendFunction1<#A, #B>? = ..., kotlin/Boolean = ..., kotlin/Boolean? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.time/Duration = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin/Int? = ..., kotlin.collections/Map<#A, #B> = ..., #B? = ..., kotlin/Boolean = ..., kotlin/Function2<#A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>? = ..., kotlin/Function3<#B, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>? = ..., kotlin/Function3<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>? = ..., kotlin.coroutines/SuspendFunction5<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, com.kazakago.swr.compose.validate/SWRValidate<#A>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit> = ..., kotlin/Function0<kotlin/Boolean> = ..., kotlin/Int = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlinx.coroutines/CoroutineScope? = ...): com.kazakago.swr.compose.config/SWRInfiniteConfig<#A, #B> // com.kazakago.swr.compose.config/SWRInfiniteConfig.copy|copy(kotlin.coroutines.SuspendFunction1<1:0,1:1>?;kotlin.Boolean;kotlin.Boolean?;kotlin.Boolean;kotlin.Boolean;kotlin.time.Duration;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.time.Duration;kotlin.time.Duration;kotlin.time.Duration;kotlin.time.Duration;kotlin.Int?;kotlin.collections.Map<1:0,1:1>;1:1?;kotlin.Boolean;kotlin.Function2<1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,kotlin.Unit>?;kotlin.Function3<1:1,1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,kotlin.Unit>?;kotlin.Function3<kotlin.Throwable,1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,kotlin.Unit>?;kotlin.coroutines.SuspendFunction5<kotlin.Throwable,1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,com.kazakago.swr.compose.validate.SWRValidate<1:0>,com.kazakago.swr.compose.validate.SWRValidateOptions,kotlin.Unit>;kotlin.Function0<kotlin.Boolean>;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlinx.coroutines.CoroutineScope?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.kazakago.swr.compose.config/SWRInfiniteConfig.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.kazakago.swr.compose.config/SWRInfiniteConfig.toString|toString(){}[0]
    final var dedupingInterval // com.kazakago.swr.compose.config/SWRInfiniteConfig.dedupingInterval|{}dedupingInterval[0]
        final fun <get-dedupingInterval>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRInfiniteConfig.dedupingInterval.<get-dedupingInterval>|<get-dedupingInterval>(){}[0]
        final fun <set-dedupingInterval>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRInfiniteConfig.dedupingInterval.<set-dedupingInterval>|<set-dedupingInterval>(kotlin.time.Duration){}[0]
    final var errorRetryCount // com.kazakago.swr.compose.config/SWRInfiniteConfig.errorRetryCount|{}errorRetryCount[0]
        final fun <get-errorRetryCount>(): kotlin/Int? // com.kazakago.swr.compose.config/SWRInfiniteConfig.errorRetryCount.<get-errorRetryCount>|<get-errorRetryCount>(){}[0]
        final fun <set-errorRetryCount>(kotlin/Int?) // com.kazakago.swr.compose.config/SWRInfiniteConfig.errorRetryCount.<set-errorRetryCount>|<set-errorRetryCount>(kotlin.Int?){}[0]
    final var errorRetryInterval // com.kazakago.swr.compose.config/SWRInfiniteConfig.errorRetryInterval|{}errorRetryInterval[0]
        final fun <get-errorRetryInterval>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRInfiniteConfig.errorRetryInterval.<get-errorRetryInterval>|<get-errorRetryInterval>(){}[0]
        final fun <set-errorRetryInterval>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRInfiniteConfig.errorRetryInterval.<set-errorRetryInterval>|<set-errorRetryInterval>(kotlin.time.Duration){}[0]
    final var fallback // com.kazakago.swr.compose.config/SWRInfiniteConfig.fallback|{}fallback[0]
        final fun <get-fallback>(): kotlin.collections/Map<#A, #B> // com.kazakago.swr.compose.config/SWRInfiniteConfig.fallback.<get-fallback>|<get-fallback>(){}[0]
        final fun <set-fallback>(kotlin.collections/Map<#A, #B>) // com.kazakago.swr.compose.config/SWRInfiniteConfig.fallback.<set-fallback>|<set-fallback>(kotlin.collections.Map<1:0,1:1>){}[0]
    final var fallbackData // com.kazakago.swr.compose.config/SWRInfiniteConfig.fallbackData|{}fallbackData[0]
        final fun <get-fallbackData>(): #B? // com.kazakago.swr.compose.config/SWRInfiniteConfig.fallbackData.<get-fallbackData>|<get-fallbackData>(){}[0]
        final fun <set-fallbackData>(#B?) // com.kazakago.swr.compose.config/SWRInfiniteConfig.fallbackData.<set-fallbackData>|<set-fallbackData>(1:1?){}[0]
    final var fetcher // com.kazakago.swr.compose.config/SWRInfiniteConfig.fetcher|{}fetcher[0]
        final fun <get-fetcher>(): kotlin.coroutines/SuspendFunction1<#A, #B>? // com.kazakago.swr.compose.config/SWRInfiniteConfig.fetcher.<get-fetcher>|<get-fetcher>(){}[0]
        final fun <set-fetcher>(kotlin.coroutines/SuspendFunction1<#A, #B>?) // com.kazakago.swr.compose.config/SWRInfiniteConfig.fetcher.<set-fetcher>|<set-fetcher>(kotlin.coroutines.SuspendFunction1<1:0,1:1>?){}[0]
    final var focusThrottleInterval // com.kazakago.swr.compose.config/SWRInfiniteConfig.focusThrottleInterval|{}focusThrottleInterval[0]
        final fun <get-focusThrottleInterval>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRInfiniteConfig.focusThrottleInterval.<get-focusThrottleInterval>|<get-focusThrottleInterval>(){}[0]
        final fun <set-focusThrottleInterval>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRInfiniteConfig.focusThrottleInterval.<set-focusThrottleInterval>|<set-focusThrottleInterval>(kotlin.time.Duration){}[0]
    final var initialSize // com.kazakago.swr.compose.config/SWRInfiniteConfig.initialSize|{}initialSize[0]
        final fun <get-initialSize>(): kotlin/Int // com.kazakago.swr.compose.config/SWRInfiniteConfig.initialSize.<get-initialSize>|<get-initialSize>(){}[0]
        final fun <set-initialSize>(kotlin/Int) // com.kazakago.swr.compose.config/SWRInfiniteConfig.initialSize.<set-initialSize>|<set-initialSize>(kotlin.Int){}[0]
    final var isPaused // com.kazakago.swr.compose.config/SWRInfiniteConfig.isPaused|{}isPaused[0]
        final fun <get-isPaused>(): kotlin/Function0<kotlin/Boolean> // com.kazakago.swr.compose.config/SWRInfiniteConfig.isPaused.<get-isPaused>|<get-isPaused>(){}[0]
        final fun <set-isPaused>(kotlin/Function0<kotlin/Boolean>) // com.kazakago.swr.compose.config/SWRInfiniteConfig.isPaused.<set-isPaused>|<set-isPaused>(kotlin.Function0<kotlin.Boolean>){}[0]
    final var keepPreviousData // com.kazakago.swr.compose.config/SWRInfiniteConfig.keepPreviousData|{}keepPreviousData[0]
        final fun <get-keepPreviousData>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.keepPreviousData.<get-keepPreviousData>|<get-keepPreviousData>(){}[0]
        final fun <set-keepPreviousData>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRInfiniteConfig.keepPreviousData.<set-keepPreviousData>|<set-keepPreviousData>(kotlin.Boolean){}[0]
    final var loadingTimeout // com.kazakago.swr.compose.config/SWRInfiniteConfig.loadingTimeout|{}loadingTimeout[0]
        final fun <get-loadingTimeout>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRInfiniteConfig.loadingTimeout.<get-loadingTimeout>|<get-loadingTimeout>(){}[0]
        final fun <set-loadingTimeout>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRInfiniteConfig.loadingTimeout.<set-loadingTimeout>|<set-loadingTimeout>(kotlin.time.Duration){}[0]
    final var onError // com.kazakago.swr.compose.config/SWRInfiniteConfig.onError|{}onError[0]
        final fun <get-onError>(): kotlin/Function3<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRInfiniteConfig.onError.<get-onError>|<get-onError>(){}[0]
        final fun <set-onError>(kotlin/Function3<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?) // com.kazakago.swr.compose.config/SWRInfiniteConfig.onError.<set-onError>|<set-onError>(kotlin.Function3<kotlin.Throwable,1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,kotlin.Unit>?){}[0]
    final var onErrorRetry // com.kazakago.swr.compose.config/SWRInfiniteConfig.onErrorRetry|{}onErrorRetry[0]
        final fun <get-onErrorRetry>(): kotlin.coroutines/SuspendFunction5<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, com.kazakago.swr.compose.validate/SWRValidate<#A>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit> // com.kazakago.swr.compose.config/SWRInfiniteConfig.onErrorRetry.<get-onErrorRetry>|<get-onErrorRetry>(){}[0]
        final fun <set-onErrorRetry>(kotlin.coroutines/SuspendFunction5<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, com.kazakago.swr.compose.validate/SWRValidate<#A>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit>) // com.kazakago.swr.compose.config/SWRInfiniteConfig.onErrorRetry.<set-onErrorRetry>|<set-onErrorRetry>(kotlin.coroutines.SuspendFunction5<kotlin.Throwable,1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,com.kazakago.swr.compose.validate.SWRValidate<1:0>,com.kazakago.swr.compose.validate.SWRValidateOptions,kotlin.Unit>){}[0]
    final var onLoadingSlow // com.kazakago.swr.compose.config/SWRInfiniteConfig.onLoadingSlow|{}onLoadingSlow[0]
        final fun <get-onLoadingSlow>(): kotlin/Function2<#A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRInfiniteConfig.onLoadingSlow.<get-onLoadingSlow>|<get-onLoadingSlow>(){}[0]
        final fun <set-onLoadingSlow>(kotlin/Function2<#A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?) // com.kazakago.swr.compose.config/SWRInfiniteConfig.onLoadingSlow.<set-onLoadingSlow>|<set-onLoadingSlow>(kotlin.Function2<1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,kotlin.Unit>?){}[0]
    final var onSuccess // com.kazakago.swr.compose.config/SWRInfiniteConfig.onSuccess|{}onSuccess[0]
        final fun <get-onSuccess>(): kotlin/Function3<#B, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRInfiniteConfig.onSuccess.<get-onSuccess>|<get-onSuccess>(){}[0]
        final fun <set-onSuccess>(kotlin/Function3<#B, #A, com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?) // com.kazakago.swr.compose.config/SWRInfiniteConfig.onSuccess.<set-onSuccess>|<set-onSuccess>(kotlin.Function3<1:1,1:0,com.kazakago.swr.compose.config.SWRConfig<1:0,1:1>,kotlin.Unit>?){}[0]
    final var persistSize // com.kazakago.swr.compose.config/SWRInfiniteConfig.persistSize|{}persistSize[0]
        final fun <get-persistSize>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.persistSize.<get-persistSize>|<get-persistSize>(){}[0]
        final fun <set-persistSize>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRInfiniteConfig.persistSize.<set-persistSize>|<set-persistSize>(kotlin.Boolean){}[0]
    final var refreshInterval // com.kazakago.swr.compose.config/SWRInfiniteConfig.refreshInterval|{}refreshInterval[0]
        final fun <get-refreshInterval>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRInfiniteConfig.refreshInterval.<get-refreshInterval>|<get-refreshInterval>(){}[0]
        final fun <set-refreshInterval>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRInfiniteConfig.refreshInterval.<set-refreshInterval>|<set-refreshInterval>(kotlin.time.Duration){}[0]
    final var refreshWhenHidden // com.kazakago.swr.compose.config/SWRInfiniteConfig.refreshWhenHidden|{}refreshWhenHidden[0]
        final fun <get-refreshWhenHidden>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.refreshWhenHidden.<get-refreshWhenHidden>|<get-refreshWhenHidden>(){}[0]
        final fun <set-refreshWhenHidden>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRInfiniteConfig.refreshWhenHidden.<set-refreshWhenHidden>|<set-refreshWhenHidden>(kotlin.Boolean){}[0]
    final var refreshWhenOffline // com.kazakago.swr.compose.config/SWRInfiniteConfig.refreshWhenOffline|{}refreshWhenOffline[0]
        final fun <get-refreshWhenOffline>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.refreshWhenOffline.<get-refreshWhenOffline>|<get-refreshWhenOffline>(){}[0]
        final fun <set-refreshWhenOffline>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRInfiniteConfig.refreshWhenOffline.<set-refreshWhenOffline>|<set-refreshWhenOffline>(kotlin.Boolean){}[0]
    final var revalidateAll // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateAll|{}revalidateAll[0]
        final fun <get-revalidateAll>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateAll.<get-revalidateAll>|<get-revalidateAll>(){}[0]
        final fun <set-revalidateAll>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateAll.<set-revalidateAll>|<set-revalidateAll>(kotlin.Boolean){}[0]
    final var revalidateFirstPage // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateFirstPage|{}revalidateFirstPage[0]
        final fun <get-revalidateFirstPage>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateFirstPage.<get-revalidateFirstPage>|<get-revalidateFirstPage>(){}[0]
        final fun <set-revalidateFirstPage>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateFirstPage.<set-revalidateFirstPage>|<set-revalidateFirstPage>(kotlin.Boolean){}[0]
    final var revalidateIfStale // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateIfStale|{}revalidateIfStale[0]
        final fun <get-revalidateIfStale>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateIfStale.<get-revalidateIfStale>|<get-revalidateIfStale>(){}[0]
        final fun <set-revalidateIfStale>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateIfStale.<set-revalidateIfStale>|<set-revalidateIfStale>(kotlin.Boolean){}[0]
    final var revalidateOnFocus // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateOnFocus|{}revalidateOnFocus[0]
        final fun <get-revalidateOnFocus>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateOnFocus.<get-revalidateOnFocus>|<get-revalidateOnFocus>(){}[0]
        final fun <set-revalidateOnFocus>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateOnFocus.<set-revalidateOnFocus>|<set-revalidateOnFocus>(kotlin.Boolean){}[0]
    final var revalidateOnMount // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateOnMount|{}revalidateOnMount[0]
        final fun <get-revalidateOnMount>(): kotlin/Boolean? // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateOnMount.<get-revalidateOnMount>|<get-revalidateOnMount>(){}[0]
        final fun <set-revalidateOnMount>(kotlin/Boolean?) // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateOnMount.<set-revalidateOnMount>|<set-revalidateOnMount>(kotlin.Boolean?){}[0]
    final var revalidateOnReconnect // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateOnReconnect|{}revalidateOnReconnect[0]
        final fun <get-revalidateOnReconnect>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateOnReconnect.<get-revalidateOnReconnect>|<get-revalidateOnReconnect>(){}[0]
        final fun <set-revalidateOnReconnect>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRInfiniteConfig.revalidateOnReconnect.<set-revalidateOnReconnect>|<set-revalidateOnReconnect>(kotlin.Boolean){}[0]
    final var scope // com.kazakago.swr.compose.config/SWRInfiniteConfig.scope|{}scope[0]
        final fun <get-scope>(): kotlinx.coroutines/CoroutineScope? // com.kazakago.swr.compose.config/SWRInfiniteConfig.scope.<get-scope>|<get-scope>(){}[0]
        final fun <set-scope>(kotlinx.coroutines/CoroutineScope?) // com.kazakago.swr.compose.config/SWRInfiniteConfig.scope.<set-scope>|<set-scope>(kotlinx.coroutines.CoroutineScope?){}[0]
    final var shouldRetryOnError // com.kazakago.swr.compose.config/SWRInfiniteConfig.shouldRetryOnError|{}shouldRetryOnError[0]
        final fun <get-shouldRetryOnError>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRInfiniteConfig.shouldRetryOnError.<get-shouldRetryOnError>|<get-shouldRetryOnError>(){}[0]
        final fun <set-shouldRetryOnError>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRInfiniteConfig.shouldRetryOnError.<set-shouldRetryOnError>|<set-shouldRetryOnError>(kotlin.Boolean){}[0]
}
final class <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose.config/SWRTriggerConfig { // com.kazakago.swr.compose.config/SWRTriggerConfig|null[0]
    constructor <init>(#B? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Function3<#B, #A, com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit>? = ..., kotlin/Function3<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit>? = ...) // com.kazakago.swr.compose.config/SWRTriggerConfig.<init>|<init>(1:1?;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Function3<1:1,1:0,com.kazakago.swr.compose.config.SWRTriggerConfig<1:0,1:1>,kotlin.Unit>?;kotlin.Function3<kotlin.Throwable,1:0,com.kazakago.swr.compose.config.SWRTriggerConfig<1:0,1:1>,kotlin.Unit>?){}[0]
    final fun component1(): #B? // com.kazakago.swr.compose.config/SWRTriggerConfig.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRTriggerConfig.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRTriggerConfig.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRTriggerConfig.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRTriggerConfig.component5|component5(){}[0]
    final fun component6(): kotlin/Function3<#B, #A, com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRTriggerConfig.component6|component6(){}[0]
    final fun component7(): kotlin/Function3<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRTriggerConfig.component7|component7(){}[0]
    final fun copy(#B? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Function3<#B, #A, com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit>? = ..., kotlin/Function3<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit>? = ...): com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B> // com.kazakago.swr.compose.config/SWRTriggerConfig.copy|copy(1:1?;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Function3<1:1,1:0,com.kazakago.swr.compose.config.SWRTriggerConfig<1:0,1:1>,kotlin.Unit>?;kotlin.Function3<kotlin.Throwable,1:0,com.kazakago.swr.compose.config.SWRTriggerConfig<1:0,1:1>,kotlin.Unit>?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.kazakago.swr.compose.config/SWRTriggerConfig.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.kazakago.swr.compose.config/SWRTriggerConfig.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.kazakago.swr.compose.config/SWRTriggerConfig.toString|toString(){}[0]
    final var onError // com.kazakago.swr.compose.config/SWRTriggerConfig.onError|{}onError[0]
        final fun <get-onError>(): kotlin/Function3<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRTriggerConfig.onError.<get-onError>|<get-onError>(){}[0]
        final fun <set-onError>(kotlin/Function3<kotlin/Throwable, #A, com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit>?) // com.kazakago.swr.compose.config/SWRTriggerConfig.onError.<set-onError>|<set-onError>(kotlin.Function3<kotlin.Throwable,1:0,com.kazakago.swr.compose.config.SWRTriggerConfig<1:0,1:1>,kotlin.Unit>?){}[0]
    final var onSuccess // com.kazakago.swr.compose.config/SWRTriggerConfig.onSuccess|{}onSuccess[0]
        final fun <get-onSuccess>(): kotlin/Function3<#B, #A, com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRTriggerConfig.onSuccess.<get-onSuccess>|<get-onSuccess>(){}[0]
        final fun <set-onSuccess>(kotlin/Function3<#B, #A, com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit>?) // com.kazakago.swr.compose.config/SWRTriggerConfig.onSuccess.<set-onSuccess>|<set-onSuccess>(kotlin.Function3<1:1,1:0,com.kazakago.swr.compose.config.SWRTriggerConfig<1:0,1:1>,kotlin.Unit>?){}[0]
    final var optimisticData // com.kazakago.swr.compose.config/SWRTriggerConfig.optimisticData|{}optimisticData[0]
        final fun <get-optimisticData>(): #B? // com.kazakago.swr.compose.config/SWRTriggerConfig.optimisticData.<get-optimisticData>|<get-optimisticData>(){}[0]
        final fun <set-optimisticData>(#B?) // com.kazakago.swr.compose.config/SWRTriggerConfig.optimisticData.<set-optimisticData>|<set-optimisticData>(1:1?){}[0]
    final var populateCache // com.kazakago.swr.compose.config/SWRTriggerConfig.populateCache|{}populateCache[0]
        final fun <get-populateCache>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRTriggerConfig.populateCache.<get-populateCache>|<get-populateCache>(){}[0]
        final fun <set-populateCache>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRTriggerConfig.populateCache.<set-populateCache>|<set-populateCache>(kotlin.Boolean){}[0]
    final var revalidate // com.kazakago.swr.compose.config/SWRTriggerConfig.revalidate|{}revalidate[0]
        final fun <get-revalidate>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRTriggerConfig.revalidate.<get-revalidate>|<get-revalidate>(){}[0]
        final fun <set-revalidate>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRTriggerConfig.revalidate.<set-revalidate>|<set-revalidate>(kotlin.Boolean){}[0]
    final var rollbackOnError // com.kazakago.swr.compose.config/SWRTriggerConfig.rollbackOnError|{}rollbackOnError[0]
        final fun <get-rollbackOnError>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRTriggerConfig.rollbackOnError.<get-rollbackOnError>|<get-rollbackOnError>(){}[0]
        final fun <set-rollbackOnError>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRTriggerConfig.rollbackOnError.<set-rollbackOnError>|<set-rollbackOnError>(kotlin.Boolean){}[0]
    final var throwOnError // com.kazakago.swr.compose.config/SWRTriggerConfig.throwOnError|{}throwOnError[0]
        final fun <get-throwOnError>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRTriggerConfig.throwOnError.<get-throwOnError>|<get-throwOnError>(){}[0]
        final fun <set-throwOnError>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRTriggerConfig.throwOnError.<set-throwOnError>|<set-throwOnError>(kotlin.Boolean){}[0]
}
final class <#A: kotlin/Any?> com.kazakago.swr.compose.config/SWRMutateConfig { // com.kazakago.swr.compose.config/SWRMutateConfig|null[0]
    constructor <init>(#A? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...) // com.kazakago.swr.compose.config/SWRMutateConfig.<init>|<init>(1:0?;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun component1(): #A? // com.kazakago.swr.compose.config/SWRMutateConfig.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRMutateConfig.component2|component2(){}[0]
    final fun component3(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRMutateConfig.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRMutateConfig.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRMutateConfig.component5|component5(){}[0]
    final fun copy(#A? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): com.kazakago.swr.compose.config/SWRMutateConfig<#A> // com.kazakago.swr.compose.config/SWRMutateConfig.copy|copy(1:0?;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.kazakago.swr.compose.config/SWRMutateConfig.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.kazakago.swr.compose.config/SWRMutateConfig.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.kazakago.swr.compose.config/SWRMutateConfig.toString|toString(){}[0]
    final var optimisticData // com.kazakago.swr.compose.config/SWRMutateConfig.optimisticData|{}optimisticData[0]
        final fun <get-optimisticData>(): #A? // com.kazakago.swr.compose.config/SWRMutateConfig.optimisticData.<get-optimisticData>|<get-optimisticData>(){}[0]
        final fun <set-optimisticData>(#A?) // com.kazakago.swr.compose.config/SWRMutateConfig.optimisticData.<set-optimisticData>|<set-optimisticData>(1:0?){}[0]
    final var populateCache // com.kazakago.swr.compose.config/SWRMutateConfig.populateCache|{}populateCache[0]
        final fun <get-populateCache>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRMutateConfig.populateCache.<get-populateCache>|<get-populateCache>(){}[0]
        final fun <set-populateCache>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRMutateConfig.populateCache.<set-populateCache>|<set-populateCache>(kotlin.Boolean){}[0]
    final var revalidate // com.kazakago.swr.compose.config/SWRMutateConfig.revalidate|{}revalidate[0]
        final fun <get-revalidate>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRMutateConfig.revalidate.<get-revalidate>|<get-revalidate>(){}[0]
        final fun <set-revalidate>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRMutateConfig.revalidate.<set-revalidate>|<set-revalidate>(kotlin.Boolean){}[0]
    final var rollbackOnError // com.kazakago.swr.compose.config/SWRMutateConfig.rollbackOnError|{}rollbackOnError[0]
        final fun <get-rollbackOnError>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRMutateConfig.rollbackOnError.<get-rollbackOnError>|<get-rollbackOnError>(){}[0]
        final fun <set-rollbackOnError>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRMutateConfig.rollbackOnError.<set-rollbackOnError>|<set-rollbackOnError>(kotlin.Boolean){}[0]
    final var throwOnError // com.kazakago.swr.compose.config/SWRMutateConfig.throwOnError|{}throwOnError[0]
        final fun <get-throwOnError>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRMutateConfig.throwOnError.<get-throwOnError>|<get-throwOnError>(){}[0]
        final fun <set-throwOnError>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRMutateConfig.throwOnError.<set-throwOnError>|<set-throwOnError>(kotlin.Boolean){}[0]
}
final class com.kazakago.swr.compose.config/SWRGlobalConfig { // com.kazakago.swr.compose.config/SWRGlobalConfig|null[0]
    constructor <init>(kotlin.coroutines/SuspendFunction1<kotlin/Any, kotlin/Any>? = ..., kotlin/Boolean = ..., kotlin/Boolean? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.time/Duration = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin/Int? = ..., kotlin.collections/Map<kotlin/Any, kotlin/Any> = ..., kotlin/Boolean = ..., kotlin/Function2<kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>? = ..., kotlin/Function3<kotlin/Any, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>? = ..., kotlin/Function3<kotlin/Throwable, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>? = ..., kotlin.coroutines/SuspendFunction5<kotlin/Throwable, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, com.kazakago.swr.compose.validate/SWRValidate<kotlin/Any>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit> = ..., kotlin/Function0<kotlin/Boolean> = ..., kotlinx.coroutines/CoroutineScope? = ...) // com.kazakago.swr.compose.config/SWRGlobalConfig.<init>|<init>(kotlin.coroutines.SuspendFunction1<kotlin.Any,kotlin.Any>?;kotlin.Boolean;kotlin.Boolean?;kotlin.Boolean;kotlin.Boolean;kotlin.time.Duration;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.time.Duration;kotlin.time.Duration;kotlin.time.Duration;kotlin.time.Duration;kotlin.Int?;kotlin.collections.Map<kotlin.Any,kotlin.Any>;kotlin.Boolean;kotlin.Function2<kotlin.Any,com.kazakago.swr.compose.config.SWRConfig<*,*>,kotlin.Unit>?;kotlin.Function3<kotlin.Any,kotlin.Any,com.kazakago.swr.compose.config.SWRConfig<*,*>,kotlin.Unit>?;kotlin.Function3<kotlin.Throwable,kotlin.Any,com.kazakago.swr.compose.config.SWRConfig<*,*>,kotlin.Unit>?;kotlin.coroutines.SuspendFunction5<kotlin.Throwable,kotlin.Any,com.kazakago.swr.compose.config.SWRConfig<*,*>,com.kazakago.swr.compose.validate.SWRValidate<kotlin.Any>,com.kazakago.swr.compose.validate.SWRValidateOptions,kotlin.Unit>;kotlin.Function0<kotlin.Boolean>;kotlinx.coroutines.CoroutineScope?){}[0]
    final fun component1(): kotlin.coroutines/SuspendFunction1<kotlin/Any, kotlin/Any>? // com.kazakago.swr.compose.config/SWRGlobalConfig.component1|component1(){}[0]
    final fun component10(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRGlobalConfig.component10|component10(){}[0]
    final fun component11(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRGlobalConfig.component11|component11(){}[0]
    final fun component12(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRGlobalConfig.component12|component12(){}[0]
    final fun component13(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRGlobalConfig.component13|component13(){}[0]
    final fun component14(): kotlin/Int? // com.kazakago.swr.compose.config/SWRGlobalConfig.component14|component14(){}[0]
    final fun component15(): kotlin.collections/Map<kotlin/Any, kotlin/Any> // com.kazakago.swr.compose.config/SWRGlobalConfig.component15|component15(){}[0]
    final fun component16(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.component16|component16(){}[0]
    final fun component17(): kotlin/Function2<kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRGlobalConfig.component17|component17(){}[0]
    final fun component18(): kotlin/Function3<kotlin/Any, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRGlobalConfig.component18|component18(){}[0]
    final fun component19(): kotlin/Function3<kotlin/Throwable, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRGlobalConfig.component19|component19(){}[0]
    final fun component2(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.component2|component2(){}[0]
    final fun component20(): kotlin.coroutines/SuspendFunction5<kotlin/Throwable, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, com.kazakago.swr.compose.validate/SWRValidate<kotlin/Any>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit> // com.kazakago.swr.compose.config/SWRGlobalConfig.component20|component20(){}[0]
    final fun component21(): kotlin/Function0<kotlin/Boolean> // com.kazakago.swr.compose.config/SWRGlobalConfig.component21|component21(){}[0]
    final fun component22(): kotlinx.coroutines/CoroutineScope? // com.kazakago.swr.compose.config/SWRGlobalConfig.component22|component22(){}[0]
    final fun component3(): kotlin/Boolean? // com.kazakago.swr.compose.config/SWRGlobalConfig.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.component5|component5(){}[0]
    final fun component6(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRGlobalConfig.component6|component6(){}[0]
    final fun component7(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.component7|component7(){}[0]
    final fun component8(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.component9|component9(){}[0]
    final fun copy(kotlin.coroutines/SuspendFunction1<kotlin/Any, kotlin/Any>? = ..., kotlin/Boolean = ..., kotlin/Boolean? = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.time/Duration = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin.time/Duration = ..., kotlin/Int? = ..., kotlin.collections/Map<kotlin/Any, kotlin/Any> = ..., kotlin/Boolean = ..., kotlin/Function2<kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>? = ..., kotlin/Function3<kotlin/Any, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>? = ..., kotlin/Function3<kotlin/Throwable, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>? = ..., kotlin.coroutines/SuspendFunction5<kotlin/Throwable, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, com.kazakago.swr.compose.validate/SWRValidate<kotlin/Any>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit> = ..., kotlin/Function0<kotlin/Boolean> = ..., kotlinx.coroutines/CoroutineScope? = ...): com.kazakago.swr.compose.config/SWRGlobalConfig // com.kazakago.swr.compose.config/SWRGlobalConfig.copy|copy(kotlin.coroutines.SuspendFunction1<kotlin.Any,kotlin.Any>?;kotlin.Boolean;kotlin.Boolean?;kotlin.Boolean;kotlin.Boolean;kotlin.time.Duration;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.time.Duration;kotlin.time.Duration;kotlin.time.Duration;kotlin.time.Duration;kotlin.Int?;kotlin.collections.Map<kotlin.Any,kotlin.Any>;kotlin.Boolean;kotlin.Function2<kotlin.Any,com.kazakago.swr.compose.config.SWRConfig<*,*>,kotlin.Unit>?;kotlin.Function3<kotlin.Any,kotlin.Any,com.kazakago.swr.compose.config.SWRConfig<*,*>,kotlin.Unit>?;kotlin.Function3<kotlin.Throwable,kotlin.Any,com.kazakago.swr.compose.config.SWRConfig<*,*>,kotlin.Unit>?;kotlin.coroutines.SuspendFunction5<kotlin.Throwable,kotlin.Any,com.kazakago.swr.compose.config.SWRConfig<*,*>,com.kazakago.swr.compose.validate.SWRValidate<kotlin.Any>,com.kazakago.swr.compose.validate.SWRValidateOptions,kotlin.Unit>;kotlin.Function0<kotlin.Boolean>;kotlinx.coroutines.CoroutineScope?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.kazakago.swr.compose.config/SWRGlobalConfig.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.kazakago.swr.compose.config/SWRGlobalConfig.toString|toString(){}[0]
    final var dedupingInterval // com.kazakago.swr.compose.config/SWRGlobalConfig.dedupingInterval|{}dedupingInterval[0]
        final fun <get-dedupingInterval>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRGlobalConfig.dedupingInterval.<get-dedupingInterval>|<get-dedupingInterval>(){}[0]
        final fun <set-dedupingInterval>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRGlobalConfig.dedupingInterval.<set-dedupingInterval>|<set-dedupingInterval>(kotlin.time.Duration){}[0]
    final var errorRetryCount // com.kazakago.swr.compose.config/SWRGlobalConfig.errorRetryCount|{}errorRetryCount[0]
        final fun <get-errorRetryCount>(): kotlin/Int? // com.kazakago.swr.compose.config/SWRGlobalConfig.errorRetryCount.<get-errorRetryCount>|<get-errorRetryCount>(){}[0]
        final fun <set-errorRetryCount>(kotlin/Int?) // com.kazakago.swr.compose.config/SWRGlobalConfig.errorRetryCount.<set-errorRetryCount>|<set-errorRetryCount>(kotlin.Int?){}[0]
    final var errorRetryInterval // com.kazakago.swr.compose.config/SWRGlobalConfig.errorRetryInterval|{}errorRetryInterval[0]
        final fun <get-errorRetryInterval>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRGlobalConfig.errorRetryInterval.<get-errorRetryInterval>|<get-errorRetryInterval>(){}[0]
        final fun <set-errorRetryInterval>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRGlobalConfig.errorRetryInterval.<set-errorRetryInterval>|<set-errorRetryInterval>(kotlin.time.Duration){}[0]
    final var fallback // com.kazakago.swr.compose.config/SWRGlobalConfig.fallback|{}fallback[0]
        final fun <get-fallback>(): kotlin.collections/Map<kotlin/Any, kotlin/Any> // com.kazakago.swr.compose.config/SWRGlobalConfig.fallback.<get-fallback>|<get-fallback>(){}[0]
        final fun <set-fallback>(kotlin.collections/Map<kotlin/Any, kotlin/Any>) // com.kazakago.swr.compose.config/SWRGlobalConfig.fallback.<set-fallback>|<set-fallback>(kotlin.collections.Map<kotlin.Any,kotlin.Any>){}[0]
    final var fetcher // com.kazakago.swr.compose.config/SWRGlobalConfig.fetcher|{}fetcher[0]
        final fun <get-fetcher>(): kotlin.coroutines/SuspendFunction1<kotlin/Any, kotlin/Any>? // com.kazakago.swr.compose.config/SWRGlobalConfig.fetcher.<get-fetcher>|<get-fetcher>(){}[0]
        final fun <set-fetcher>(kotlin.coroutines/SuspendFunction1<kotlin/Any, kotlin/Any>?) // com.kazakago.swr.compose.config/SWRGlobalConfig.fetcher.<set-fetcher>|<set-fetcher>(kotlin.coroutines.SuspendFunction1<kotlin.Any,kotlin.Any>?){}[0]
    final var focusThrottleInterval // com.kazakago.swr.compose.config/SWRGlobalConfig.focusThrottleInterval|{}focusThrottleInterval[0]
        final fun <get-focusThrottleInterval>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRGlobalConfig.focusThrottleInterval.<get-focusThrottleInterval>|<get-focusThrottleInterval>(){}[0]
        final fun <set-focusThrottleInterval>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRGlobalConfig.focusThrottleInterval.<set-focusThrottleInterval>|<set-focusThrottleInterval>(kotlin.time.Duration){}[0]
    final var isPaused // com.kazakago.swr.compose.config/SWRGlobalConfig.isPaused|{}isPaused[0]
        final fun <get-isPaused>(): kotlin/Function0<kotlin/Boolean> // com.kazakago.swr.compose.config/SWRGlobalConfig.isPaused.<get-isPaused>|<get-isPaused>(){}[0]
        final fun <set-isPaused>(kotlin/Function0<kotlin/Boolean>) // com.kazakago.swr.compose.config/SWRGlobalConfig.isPaused.<set-isPaused>|<set-isPaused>(kotlin.Function0<kotlin.Boolean>){}[0]
    final var keepPreviousData // com.kazakago.swr.compose.config/SWRGlobalConfig.keepPreviousData|{}keepPreviousData[0]
        final fun <get-keepPreviousData>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.keepPreviousData.<get-keepPreviousData>|<get-keepPreviousData>(){}[0]
        final fun <set-keepPreviousData>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRGlobalConfig.keepPreviousData.<set-keepPreviousData>|<set-keepPreviousData>(kotlin.Boolean){}[0]
    final var loadingTimeout // com.kazakago.swr.compose.config/SWRGlobalConfig.loadingTimeout|{}loadingTimeout[0]
        final fun <get-loadingTimeout>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRGlobalConfig.loadingTimeout.<get-loadingTimeout>|<get-loadingTimeout>(){}[0]
        final fun <set-loadingTimeout>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRGlobalConfig.loadingTimeout.<set-loadingTimeout>|<set-loadingTimeout>(kotlin.time.Duration){}[0]
    final var onError // com.kazakago.swr.compose.config/SWRGlobalConfig.onError|{}onError[0]
        final fun <get-onError>(): kotlin/Function3<kotlin/Throwable, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRGlobalConfig.onError.<get-onError>|<get-onError>(){}[0]
        final fun <set-onError>(kotlin/Function3<kotlin/Throwable, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>?) // com.kazakago.swr.compose.config/SWRGlobalConfig.onError.<set-onError>|<set-onError>(kotlin.Function3<kotlin.Throwable,kotlin.Any,com.kazakago.swr.compose.config.SWRConfig<*,*>,kotlin.Unit>?){}[0]
    final var onErrorRetry // com.kazakago.swr.compose.config/SWRGlobalConfig.onErrorRetry|{}onErrorRetry[0]
        final fun <get-onErrorRetry>(): kotlin.coroutines/SuspendFunction5<kotlin/Throwable, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, com.kazakago.swr.compose.validate/SWRValidate<kotlin/Any>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit> // com.kazakago.swr.compose.config/SWRGlobalConfig.onErrorRetry.<get-onErrorRetry>|<get-onErrorRetry>(){}[0]
        final fun <set-onErrorRetry>(kotlin.coroutines/SuspendFunction5<kotlin/Throwable, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, com.kazakago.swr.compose.validate/SWRValidate<kotlin/Any>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit>) // com.kazakago.swr.compose.config/SWRGlobalConfig.onErrorRetry.<set-onErrorRetry>|<set-onErrorRetry>(kotlin.coroutines.SuspendFunction5<kotlin.Throwable,kotlin.Any,com.kazakago.swr.compose.config.SWRConfig<*,*>,com.kazakago.swr.compose.validate.SWRValidate<kotlin.Any>,com.kazakago.swr.compose.validate.SWRValidateOptions,kotlin.Unit>){}[0]
    final var onLoadingSlow // com.kazakago.swr.compose.config/SWRGlobalConfig.onLoadingSlow|{}onLoadingSlow[0]
        final fun <get-onLoadingSlow>(): kotlin/Function2<kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRGlobalConfig.onLoadingSlow.<get-onLoadingSlow>|<get-onLoadingSlow>(){}[0]
        final fun <set-onLoadingSlow>(kotlin/Function2<kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>?) // com.kazakago.swr.compose.config/SWRGlobalConfig.onLoadingSlow.<set-onLoadingSlow>|<set-onLoadingSlow>(kotlin.Function2<kotlin.Any,com.kazakago.swr.compose.config.SWRConfig<*,*>,kotlin.Unit>?){}[0]
    final var onSuccess // com.kazakago.swr.compose.config/SWRGlobalConfig.onSuccess|{}onSuccess[0]
        final fun <get-onSuccess>(): kotlin/Function3<kotlin/Any, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>? // com.kazakago.swr.compose.config/SWRGlobalConfig.onSuccess.<get-onSuccess>|<get-onSuccess>(){}[0]
        final fun <set-onSuccess>(kotlin/Function3<kotlin/Any, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, kotlin/Unit>?) // com.kazakago.swr.compose.config/SWRGlobalConfig.onSuccess.<set-onSuccess>|<set-onSuccess>(kotlin.Function3<kotlin.Any,kotlin.Any,com.kazakago.swr.compose.config.SWRConfig<*,*>,kotlin.Unit>?){}[0]
    final var refreshInterval // com.kazakago.swr.compose.config/SWRGlobalConfig.refreshInterval|{}refreshInterval[0]
        final fun <get-refreshInterval>(): kotlin.time/Duration // com.kazakago.swr.compose.config/SWRGlobalConfig.refreshInterval.<get-refreshInterval>|<get-refreshInterval>(){}[0]
        final fun <set-refreshInterval>(kotlin.time/Duration) // com.kazakago.swr.compose.config/SWRGlobalConfig.refreshInterval.<set-refreshInterval>|<set-refreshInterval>(kotlin.time.Duration){}[0]
    final var refreshWhenHidden // com.kazakago.swr.compose.config/SWRGlobalConfig.refreshWhenHidden|{}refreshWhenHidden[0]
        final fun <get-refreshWhenHidden>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.refreshWhenHidden.<get-refreshWhenHidden>|<get-refreshWhenHidden>(){}[0]
        final fun <set-refreshWhenHidden>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRGlobalConfig.refreshWhenHidden.<set-refreshWhenHidden>|<set-refreshWhenHidden>(kotlin.Boolean){}[0]
    final var refreshWhenOffline // com.kazakago.swr.compose.config/SWRGlobalConfig.refreshWhenOffline|{}refreshWhenOffline[0]
        final fun <get-refreshWhenOffline>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.refreshWhenOffline.<get-refreshWhenOffline>|<get-refreshWhenOffline>(){}[0]
        final fun <set-refreshWhenOffline>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRGlobalConfig.refreshWhenOffline.<set-refreshWhenOffline>|<set-refreshWhenOffline>(kotlin.Boolean){}[0]
    final var revalidateIfStale // com.kazakago.swr.compose.config/SWRGlobalConfig.revalidateIfStale|{}revalidateIfStale[0]
        final fun <get-revalidateIfStale>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.revalidateIfStale.<get-revalidateIfStale>|<get-revalidateIfStale>(){}[0]
        final fun <set-revalidateIfStale>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRGlobalConfig.revalidateIfStale.<set-revalidateIfStale>|<set-revalidateIfStale>(kotlin.Boolean){}[0]
    final var revalidateOnFocus // com.kazakago.swr.compose.config/SWRGlobalConfig.revalidateOnFocus|{}revalidateOnFocus[0]
        final fun <get-revalidateOnFocus>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.revalidateOnFocus.<get-revalidateOnFocus>|<get-revalidateOnFocus>(){}[0]
        final fun <set-revalidateOnFocus>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRGlobalConfig.revalidateOnFocus.<set-revalidateOnFocus>|<set-revalidateOnFocus>(kotlin.Boolean){}[0]
    final var revalidateOnMount // com.kazakago.swr.compose.config/SWRGlobalConfig.revalidateOnMount|{}revalidateOnMount[0]
        final fun <get-revalidateOnMount>(): kotlin/Boolean? // com.kazakago.swr.compose.config/SWRGlobalConfig.revalidateOnMount.<get-revalidateOnMount>|<get-revalidateOnMount>(){}[0]
        final fun <set-revalidateOnMount>(kotlin/Boolean?) // com.kazakago.swr.compose.config/SWRGlobalConfig.revalidateOnMount.<set-revalidateOnMount>|<set-revalidateOnMount>(kotlin.Boolean?){}[0]
    final var revalidateOnReconnect // com.kazakago.swr.compose.config/SWRGlobalConfig.revalidateOnReconnect|{}revalidateOnReconnect[0]
        final fun <get-revalidateOnReconnect>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.revalidateOnReconnect.<get-revalidateOnReconnect>|<get-revalidateOnReconnect>(){}[0]
        final fun <set-revalidateOnReconnect>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRGlobalConfig.revalidateOnReconnect.<set-revalidateOnReconnect>|<set-revalidateOnReconnect>(kotlin.Boolean){}[0]
    final var scope // com.kazakago.swr.compose.config/SWRGlobalConfig.scope|{}scope[0]
        final fun <get-scope>(): kotlinx.coroutines/CoroutineScope? // com.kazakago.swr.compose.config/SWRGlobalConfig.scope.<get-scope>|<get-scope>(){}[0]
        final fun <set-scope>(kotlinx.coroutines/CoroutineScope?) // com.kazakago.swr.compose.config/SWRGlobalConfig.scope.<set-scope>|<set-scope>(kotlinx.coroutines.CoroutineScope?){}[0]
    final var shouldRetryOnError // com.kazakago.swr.compose.config/SWRGlobalConfig.shouldRetryOnError|{}shouldRetryOnError[0]
        final fun <get-shouldRetryOnError>(): kotlin/Boolean // com.kazakago.swr.compose.config/SWRGlobalConfig.shouldRetryOnError.<get-shouldRetryOnError>|<get-shouldRetryOnError>(){}[0]
        final fun <set-shouldRetryOnError>(kotlin/Boolean) // com.kazakago.swr.compose.config/SWRGlobalConfig.shouldRetryOnError.<set-shouldRetryOnError>|<set-shouldRetryOnError>(kotlin.Boolean){}[0]
}
final class com.kazakago.swr.compose.validate/SWRValidateOptions { // com.kazakago.swr.compose.validate/SWRValidateOptions|null[0]
    constructor <init>(kotlin/Int, kotlin/Boolean) // com.kazakago.swr.compose.validate/SWRValidateOptions.<init>|<init>(kotlin.Int;kotlin.Boolean){}[0]
    final fun component1(): kotlin/Int // com.kazakago.swr.compose.validate/SWRValidateOptions.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // com.kazakago.swr.compose.validate/SWRValidateOptions.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Boolean = ...): com.kazakago.swr.compose.validate/SWRValidateOptions // com.kazakago.swr.compose.validate/SWRValidateOptions.copy|copy(kotlin.Int;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.kazakago.swr.compose.validate/SWRValidateOptions.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.kazakago.swr.compose.validate/SWRValidateOptions.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.kazakago.swr.compose.validate/SWRValidateOptions.toString|toString(){}[0]
    final val dedupe // com.kazakago.swr.compose.validate/SWRValidateOptions.dedupe|{}dedupe[0]
        final fun <get-dedupe>(): kotlin/Boolean // com.kazakago.swr.compose.validate/SWRValidateOptions.dedupe.<get-dedupe>|<get-dedupe>(){}[0]
    final val retryCount // com.kazakago.swr.compose.validate/SWRValidateOptions.retryCount|{}retryCount[0]
        final fun <get-retryCount>(): kotlin/Int // com.kazakago.swr.compose.validate/SWRValidateOptions.retryCount.<get-retryCount>|<get-retryCount>(){}[0]
}
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> com.kazakago.swr.compose/useSWRMutation(#A?, kotlin.coroutines/SuspendFunction2<#A, #C, #B>, kotlin/Function1<com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.kazakago.swr.compose.state/SWRMutationState<#A, #B, #C> // com.kazakago.swr.compose/useSWRMutation|useSWRMutation(0:0?;kotlin.coroutines.SuspendFunction2<0:0,0:2,0:1>;kotlin.Function1<com.kazakago.swr.compose.config.SWRTriggerConfig<0:0,0:1>,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> com.kazakago.swr.compose/useSWRMutation(kotlin/Function0<#A?>, kotlin.coroutines/SuspendFunction2<#A, #C, #B>, kotlin/Function1<com.kazakago.swr.compose.config/SWRTriggerConfig<#A, #B>, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.kazakago.swr.compose.state/SWRMutationState<#A, #B, #C> // com.kazakago.swr.compose/useSWRMutation|useSWRMutation(kotlin.Function0<0:0?>;kotlin.coroutines.SuspendFunction2<0:0,0:2,0:1>;kotlin.Function1<com.kazakago.swr.compose.config.SWRTriggerConfig<0:0,0:1>,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose/useSWR(#A?, kotlin.coroutines/SuspendFunction1<#A, #B>?, kotlinx.coroutines/CoroutineScope?, kotlin/Function1<com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.kazakago.swr.compose.state/SWRState<#A, #B> // com.kazakago.swr.compose/useSWR|useSWR(0:0?;kotlin.coroutines.SuspendFunction1<0:0,0:1>?;kotlinx.coroutines.CoroutineScope?;kotlin.Function1<com.kazakago.swr.compose.config.SWRConfig<0:0,0:1>,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose/useSWR(kotlin/Function0<#A?>, kotlin.coroutines/SuspendFunction1<#A, #B>?, kotlinx.coroutines/CoroutineScope?, kotlin/Function1<com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.kazakago.swr.compose.state/SWRState<#A, #B> // com.kazakago.swr.compose/useSWR|useSWR(kotlin.Function0<0:0?>;kotlin.coroutines.SuspendFunction1<0:0,0:1>?;kotlinx.coroutines.CoroutineScope?;kotlin.Function1<com.kazakago.swr.compose.config.SWRConfig<0:0,0:1>,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose/useSWRConfig(androidx.compose.runtime/Composer?, kotlin/Int): com.kazakago.swr.compose.state/SWRConfigState<#A, #B> // com.kazakago.swr.compose/useSWRConfig|useSWRConfig(androidx.compose.runtime.Composer?;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose/useSWRImmutable(#A?, kotlin.coroutines/SuspendFunction1<#A, #B>?, kotlinx.coroutines/CoroutineScope?, kotlin/Function1<com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.kazakago.swr.compose.state/SWRState<#A, #B> // com.kazakago.swr.compose/useSWRImmutable|useSWRImmutable(0:0?;kotlin.coroutines.SuspendFunction1<0:0,0:1>?;kotlinx.coroutines.CoroutineScope?;kotlin.Function1<com.kazakago.swr.compose.config.SWRConfig<0:0,0:1>,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose/useSWRImmutable(kotlin/Function0<#A?>, kotlin.coroutines/SuspendFunction1<#A, #B>?, kotlinx.coroutines/CoroutineScope?, kotlin/Function1<com.kazakago.swr.compose.config/SWRConfig<#A, #B>, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.kazakago.swr.compose.state/SWRState<#A, #B> // com.kazakago.swr.compose/useSWRImmutable|useSWRImmutable(kotlin.Function0<0:0?>;kotlin.coroutines.SuspendFunction1<0:0,0:1>?;kotlinx.coroutines.CoroutineScope?;kotlin.Function1<com.kazakago.swr.compose.config.SWRConfig<0:0,0:1>,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose/useSWRInfinite(kotlin/Function2<kotlin/Int, #B?, #A?>, kotlin.coroutines/SuspendFunction1<#A, #B>?, kotlinx.coroutines/CoroutineScope?, kotlin/Function1<com.kazakago.swr.compose.config/SWRInfiniteConfig<#A, #B>, kotlin/Unit>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.kazakago.swr.compose.state/SWRInfiniteState<#A, #B> // com.kazakago.swr.compose/useSWRInfinite|useSWRInfinite(kotlin.Function2<kotlin.Int,0:1?,0:0?>;kotlin.coroutines.SuspendFunction1<0:0,0:1>?;kotlinx.coroutines.CoroutineScope?;kotlin.Function1<com.kazakago.swr.compose.config.SWRInfiniteConfig<0:0,0:1>,kotlin.Unit>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose/useSWRPreload(#A?, kotlin.coroutines/SuspendFunction1<#A, #B>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.kazakago.swr.compose.preload/SWRPreload // com.kazakago.swr.compose/useSWRPreload|useSWRPreload(0:0?;kotlin.coroutines.SuspendFunction1<0:0,0:1>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.kazakago.swr.compose/useSWRPreload(kotlin/Function0<#A?>, kotlin.coroutines/SuspendFunction1<#A, #B>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.kazakago.swr.compose.preload/SWRPreload // com.kazakago.swr.compose/useSWRPreload|useSWRPreload(kotlin.Function0<0:0?>;kotlin.coroutines.SuspendFunction1<0:0,0:1>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun com.kazakago.swr.compose.config/SWRConfig(kotlin/Function1<com.kazakago.swr.compose.config/SWRGlobalConfig, kotlin/Unit>?, kotlin/Function2<androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.kazakago.swr.compose.config/SWRConfig|SWRConfig(kotlin.Function1<com.kazakago.swr.compose.config.SWRGlobalConfig,kotlin.Unit>?;kotlin.Function2<androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final val com.kazakago.swr.compose.cache/LocalSWRCache // com.kazakago.swr.compose.cache/LocalSWRCache|{}LocalSWRCache[0]
    final fun <get-LocalSWRCache>(): androidx.compose.runtime/ProvidableCompositionLocal<com.kazakago.swr.compose.cache/SWRCache> // com.kazakago.swr.compose.cache/LocalSWRCache.<get-LocalSWRCache>|<get-LocalSWRCache>(){}[0]
final val com.kazakago.swr.compose.cache/LocalSWRSystemCache // com.kazakago.swr.compose.cache/LocalSWRSystemCache|{}LocalSWRSystemCache[0]
    final fun <get-LocalSWRSystemCache>(): androidx.compose.runtime/ProvidableCompositionLocal<com.kazakago.swr.compose.cache/SWRSystemCache> // com.kazakago.swr.compose.cache/LocalSWRSystemCache.<get-LocalSWRSystemCache>|<get-LocalSWRSystemCache>(){}[0]
final val com.kazakago.swr.compose.cache/com_kazakago_swr_compose_cache_SWRCacheImpl$stableprop // com.kazakago.swr.compose.cache/com_kazakago_swr_compose_cache_SWRCacheImpl$stableprop|#static{}com_kazakago_swr_compose_cache_SWRCacheImpl$stableprop[0]
final val com.kazakago.swr.compose.cache/com_kazakago_swr_compose_cache_SWRSystemCacheImpl$stableprop // com.kazakago.swr.compose.cache/com_kazakago_swr_compose_cache_SWRSystemCacheImpl$stableprop|#static{}com_kazakago_swr_compose_cache_SWRSystemCacheImpl$stableprop[0]
final val com.kazakago.swr.compose.config/LocalSWRConfig // com.kazakago.swr.compose.config/LocalSWRConfig|{}LocalSWRConfig[0]
    final fun <get-LocalSWRConfig>(): androidx.compose.runtime/ProvidableCompositionLocal<com.kazakago.swr.compose.config/SWRGlobalConfig> // com.kazakago.swr.compose.config/LocalSWRConfig.<get-LocalSWRConfig>|<get-LocalSWRConfig>(){}[0]
final val com.kazakago.swr.compose.config/com_kazakago_swr_compose_config_SWRConfigImpl$stableprop // com.kazakago.swr.compose.config/com_kazakago_swr_compose_config_SWRConfigImpl$stableprop|#static{}com_kazakago_swr_compose_config_SWRConfigImpl$stableprop[0]
final val com.kazakago.swr.compose.config/com_kazakago_swr_compose_config_SWRGlobalConfig$stableprop // com.kazakago.swr.compose.config/com_kazakago_swr_compose_config_SWRGlobalConfig$stableprop|#static{}com_kazakago_swr_compose_config_SWRGlobalConfig$stableprop[0]
final val com.kazakago.swr.compose.config/com_kazakago_swr_compose_config_SWRInfiniteConfig$stableprop // com.kazakago.swr.compose.config/com_kazakago_swr_compose_config_SWRInfiniteConfig$stableprop|#static{}com_kazakago_swr_compose_config_SWRInfiniteConfig$stableprop[0]
final val com.kazakago.swr.compose.config/com_kazakago_swr_compose_config_SWRMutateConfig$stableprop // com.kazakago.swr.compose.config/com_kazakago_swr_compose_config_SWRMutateConfig$stableprop|#static{}com_kazakago_swr_compose_config_SWRMutateConfig$stableprop[0]
final val com.kazakago.swr.compose.config/com_kazakago_swr_compose_config_SWRTriggerConfig$stableprop // com.kazakago.swr.compose.config/com_kazakago_swr_compose_config_SWRTriggerConfig$stableprop|#static{}com_kazakago_swr_compose_config_SWRTriggerConfig$stableprop[0]
final val com.kazakago.swr.compose.internal/com_kazakago_swr_compose_internal_DataHolder$stableprop // com.kazakago.swr.compose.internal/com_kazakago_swr_compose_internal_DataHolder$stableprop|#static{}com_kazakago_swr_compose_internal_DataHolder$stableprop[0]
final val com.kazakago.swr.compose.mutate/com_kazakago_swr_compose_mutate_SWRMutateImpl$stableprop // com.kazakago.swr.compose.mutate/com_kazakago_swr_compose_mutate_SWRMutateImpl$stableprop|#static{}com_kazakago_swr_compose_mutate_SWRMutateImpl$stableprop[0]
final val com.kazakago.swr.compose.preload/com_kazakago_swr_compose_preload_SWRPreloadImpl$stableprop // com.kazakago.swr.compose.preload/com_kazakago_swr_compose_preload_SWRPreloadImpl$stableprop|#static{}com_kazakago_swr_compose_preload_SWRPreloadImpl$stableprop[0]
final val com.kazakago.swr.compose.retry/OnErrorRetryDefault // com.kazakago.swr.compose.retry/OnErrorRetryDefault|{}OnErrorRetryDefault[0]
    final fun <get-OnErrorRetryDefault>(): kotlin.coroutines/SuspendFunction5<kotlin/Throwable, kotlin/Any, com.kazakago.swr.compose.config/SWRConfig<*, *>, com.kazakago.swr.compose.validate/SWRValidate<kotlin/Any>, com.kazakago.swr.compose.validate/SWRValidateOptions, kotlin/Unit> // com.kazakago.swr.compose.retry/OnErrorRetryDefault.<get-OnErrorRetryDefault>|<get-OnErrorRetryDefault>(){}[0]
final val com.kazakago.swr.compose.state/com_kazakago_swr_compose_state_SWRConfigStateImpl$stableprop // com.kazakago.swr.compose.state/com_kazakago_swr_compose_state_SWRConfigStateImpl$stableprop|#static{}com_kazakago_swr_compose_state_SWRConfigStateImpl$stableprop[0]
final val com.kazakago.swr.compose.state/com_kazakago_swr_compose_state_SWRInfiniteStateImpl$stableprop // com.kazakago.swr.compose.state/com_kazakago_swr_compose_state_SWRInfiniteStateImpl$stableprop|#static{}com_kazakago_swr_compose_state_SWRInfiniteStateImpl$stableprop[0]
final val com.kazakago.swr.compose.state/com_kazakago_swr_compose_state_SWRMutationStateImpl$stableprop // com.kazakago.swr.compose.state/com_kazakago_swr_compose_state_SWRMutationStateImpl$stableprop|#static{}com_kazakago_swr_compose_state_SWRMutationStateImpl$stableprop[0]
final val com.kazakago.swr.compose.state/com_kazakago_swr_compose_state_SWRStateImpl$stableprop // com.kazakago.swr.compose.state/com_kazakago_swr_compose_state_SWRStateImpl$stableprop|#static{}com_kazakago_swr_compose_state_SWRStateImpl$stableprop[0]
final val com.kazakago.swr.compose.trigger/com_kazakago_swr_compose_trigger_SWRResetImpl$stableprop // com.kazakago.swr.compose.trigger/com_kazakago_swr_compose_trigger_SWRResetImpl$stableprop|#static{}com_kazakago_swr_compose_trigger_SWRResetImpl$stableprop[0]
final val com.kazakago.swr.compose.trigger/com_kazakago_swr_compose_trigger_SWRTriggerImpl$stableprop // com.kazakago.swr.compose.trigger/com_kazakago_swr_compose_trigger_SWRTriggerImpl$stableprop|#static{}com_kazakago_swr_compose_trigger_SWRTriggerImpl$stableprop[0]
final val com.kazakago.swr.compose.validate/com_kazakago_swr_compose_validate_SWRValidateImpl$stableprop // com.kazakago.swr.compose.validate/com_kazakago_swr_compose_validate_SWRValidateImpl$stableprop|#static{}com_kazakago_swr_compose_validate_SWRValidateImpl$stableprop[0]
final val com.kazakago.swr.compose.validate/com_kazakago_swr_compose_validate_SWRValidateOptions$stableprop // com.kazakago.swr.compose.validate/com_kazakago_swr_compose_validate_SWRValidateOptions$stableprop|#static{}com_kazakago_swr_compose_validate_SWRValidateOptions$stableprop[0]
